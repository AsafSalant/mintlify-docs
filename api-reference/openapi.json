{
  "openapi": "3.1.0",
  "info": {
    "title": "Olyptik API",
    "description": "API for web crawling and content extraction services",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.olyptik.io"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/crawls": {
      "get": {
        "description": "Returns all crawls from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results with matching crawls",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Crawl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Initiates a new crawl",
        "requestBody": {
          "description": "maxResults and maxDepth will be ignored if useSitemap or entireWebsite is true",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartCrawlPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Crawl object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crawl"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/crawls/query": {
      "post": {
        "description": "Query crawls",
        "requestBody": {
          "description": "Query crawls",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryCrawlsPayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Paginated results with matching crawls",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryCrawlPagination"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/crawls/{id}": {
      "get": {
        "description": "Returns a single crawl based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of crawl to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crawl"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Aborts a single crawl based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of crawl to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl aborted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crawl"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Missing page parameter"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/crawl-results/{crawlId}": {
      "get": {
        "description": "Returns all crawl results for a specific crawl",
        "parameters": [
          {
            "name": "crawlId",
            "in": "path",
            "description": "ID of crawl to get results for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of results per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results with matching crawl results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlResultPagination"
                }
              }
            }
          }
        }
      }
    },
    "/crawl-logs/{crawlId}": {
      "get": {
        "description": "Returns all logs for a specific crawl",
        "parameters": [
          {
            "name": "crawlId",
            "in": "path",
            "description": "ID of crawl to get logs for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of logs per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1200,
              "default": 1200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated results with crawl logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlLogPagination"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing API key"
          },
          "404": {
            "description": "Crawl not found"
          }
        }
      }
    }
  },
  "webhooks": {
    "/crawls/webhook": {
      "post": {
        "description": "Webhook notification when a crawl status changes",
        "requestBody": {
          "description": "Crawl status update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Crawl"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "/crawl-results/created": {
      "post": {
        "description": "Webhook notification when a crawl result is created",
        "requestBody": {
          "description": "New crawl result data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrawlResult"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Crawl": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StartCrawlPayload"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the crawl",
                "type": "string",
                "example": "6870e36787c81925622df818"
              },
              "createdAt": {
                "description": "Timestamp when the crawl was created",
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "description": "Current status of the crawl",
                "type": "string",
                "enum": [
                  "running",
                  "succeeded",
                  "failed",
                  "aborted",
                  "timed_out",
                  "error"
                ],
                "example": "timed_out"
              },
              "completedAt": {
                "description": "Timestamp when the crawl was completed",
                "type": "string",
                "format": "date-time"
              },
              "durationInSeconds": {
                "description": "Duration of the crawl in seconds",
                "type": "integer",
                "minimum": 0,
                "example": 1800
              },
              "brandId": {
                "description": "ID of the brand associated with the crawl",
                "type": "string"
              },
              "startUrls": {
                "description": "Array of URLs to start crawling from",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                },
                "example": [
                  "https://example.com"
                ]
              },
              "totalPages": {
                "description": "Count of pages extracted",
                "type": "integer",
                "minimum": 0,
                "example": 100
              },
              "maxDepth": {
                "description": "Maximum depth of pages to crawl",
                "type": "integer",
                "minimum": 1,
                "maximum": 99,
                "example": 10
              },
              "maxResults": {
                "description": "Maximum number of results to collect",
                "type": "integer",
                "minimum": 1,
                "maximum": 110
              },
              "extraction": {
                "description": "Instructions defining how the AI should extract specific content from the crawl results",
                "type": "string",
                "default": "",
                "example": "Extract only pricing info"
              },
              "origin": {
                "description": "Origin of the crawl request",
                "type": "string",
                "enum": [
                  "api",
                  "web"
                ],
                "example": "web"
              },
              "timeout": {
                "description": "Timeout duration in seconds",
                "type": "integer",
                "minimum": 0,
                "default": 1800,
                "example": 1800
              },
              "useStaticIps": {
                "description": "Whether to use static IPs for the crawl. This target website can whitelist the IPs to use for the crawl. The static IP will be 154.17.150.0",
                "type": "boolean",
                "default": false,
                "example": false
              }
            }
          }
        ]
      },
      "StartCrawlPayload": {
        "type": "object",
        "required": [
          "startUrl"
        ],
        "properties": {
          "startUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com",
            "description": "URL to start crawling from"
          },
          "maxResults": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "description": "Maximum number of results to collect"
          },
          "maxDepth": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "description": "Maximum depth of pages to crawl",
            "default": 10
          },
          "useSitemap": {
            "type": "boolean",
            "description": "Whether to use sitemap.xml to crawl the website. If true - maxResults and maxDepth will be ignored.",
            "example": false,
            "default": false
          },
          "entireWebsite": {
            "type": "boolean",
            "description": "Whether to crawl the entire website. If true - maxResults and maxDepth will be ignored.",
            "example": false,
            "default": false
          },
          "excludeNonMainTags": {
            "type": "boolean",
            "description": "Whether to exclude non-main tags from the crawl results' markdown",
            "example": true,
            "default": true
          },
          "includeLinks": {
            "type": "boolean",
            "description": "Whether to include links in the crawl results' markdown",
            "default": true,
            "example": true
          },
          "deduplicateContent": {
            "type": "boolean",
            "description": "Whether to remove duplicate text fragments that appeared on other pages.",
            "default": true,
            "example": true
          },
          "extraction": {
            "type": "string",
            "description": "Instructions defining how the AI should extract specific content from the crawl results",
            "default": "",
            "example": "Extract only pricing info about the product"
          },
          "engineType": {
            "type": "string",
            "description": "The engine to use for the crawl. Auto: auto detect the best engine (default). Cheerio: fast, great for static websites. Playwright: great for dynamic websites that use JavaScript frameworks. ",
            "enum": [
              "auto",
              "cheerio",
              "playwright"
            ],
            "default": "auto",
            "example": "auto"
          },
          "useStaticIps": {
            "type": "boolean",
            "default": false,
            "description": "Whether to use static IPs for the crawl. This target website can whitelist the IPs to use for the crawl. The static IP will be 154.17.150.0",
            "example": false
          },
          "timeout": {
            "type": "integer",
            "minimum": 60,
            "description": "Timeout duration in minutes",
            "example": 60
          }
        }
      },
      "CrawlResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the crawl result",
            "example": "3450e36787c81925622df494"
          },
          "crawlId": {
            "type": "string",
            "description": "ID of the crawl that generated this result",
            "example": "6450e36787c81925622df492"
          },
          "teamId": {
            "type": "string",
            "description": "ID of the team associated with the crawl result",
            "example": "6450e36787c81925622df494"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the crawled page",
            "example": "https://example.com/products/smartphone"
          },
          "title": {
            "type": "string",
            "description": "Content extracted from the crawled page",
            "example": "Latest Smartphone Model - Features include 6.5\" display, 256GB storage, and 48MP camera. Available in Black and Silver."
          },
          "markdown": {
            "type": "string",
            "description": "Markdown content extracted from the crawled page",
            "example": "## Latest Smartphone Model\n\nFeatures include 6.5\" display, 256GB storage, and 48MP camera. Available in Black and Silver."
          },
          "processedByAI": {
            "type": "boolean",
            "description": "Markdown content extracted from the crawled page",
            "example": false
          },
          "depthOfUrl": {
            "type": "integer",
            "description": "Depth of the URL in the crawl",
            "example": 2
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the result was created",
            "example": "2024-03-20T15:30:45Z"
          }
        }
      },
      "CrawlResultPagination": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrawlResult"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "default": 20,
            "required": true
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          },
          "totalResults": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          }
        }
      },
      "CrawlLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the log entry",
            "example": "6870e3c687c81925622df89f"
          },
          "message": {
            "type": "string",
            "description": "Log message",
            "example": "Page crawled successfully"
          },
          "level": {
            "type": "string",
            "enum": [
              "info",
              "debug",
              "warn",
              "error"
            ],
            "description": "Log level",
            "example": "info"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the log entry",
            "example": "Successfully crawled https://example.com/page"
          },
          "crawlId": {
            "type": "string",
            "description": "ID of the crawl this log belongs to",
            "example": "6870e36787c81925622df818"
          },
          "teamId": {
            "type": "string",
            "nullable": true,
            "description": "ID of the team associated with this log",
            "example": "680e8bc08cdb14f10180db6a"
          },
          "data": {
            "type": "object",
            "nullable": true,
            "description": "Additional data associated with the log entry",
            "example": {
              "url": "https://example.com/page",
              "statusCode": 200
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the log was created",
            "example": "2025-07-11T10:13:26.966Z"
          }
        }
      },
      "CrawlLogPagination": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrawlLog"
            }
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1,
            "required": true
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "default": 1200,
            "required": true
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          },
          "totalResults": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          }
        }
      },
      "QueryCrawlsPayload": {
        "type": "object",
        "required": [
          "page"
        ],
        "properties": {
          "status": {
            "type": "array",
            "required": false,
            "description": "Status of the crawls to query, if left empty all statuses will be queried",
            "items": {
              "type": "string",
              "enum": [
                "running",
                "succeeded",
                "failed",
                "aborted",
                "timed_out",
                "error"
              ]
            }
          },
          "startUrls": {
            "type": "array",
            "required": false,
            "description": "Start URLs of the crawls to query, if left empty all start URLs will be queried",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "page": {
            "type": "integer",
            "description": "Page number to query",
            "minimum": 0,
            "default": 0,
            "required": true
          }
        }
      },
      "QueryCrawlPagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Crawl"
            }
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          },
          "totalResults": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "required": true
          },
          "limit": {
            "type": "integer",
            "minimum": 0,
            "default": 20,
            "required": true
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}