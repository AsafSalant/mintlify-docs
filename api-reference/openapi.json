{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.olyptik.io"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/crawls": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Crawl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Initiates a new crawl",
        "requestBody": {
          "description": "Crawl to initiate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCrawlDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Crawl object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crawl"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/crawls/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Returns a single crawl based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of crawl to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crawl"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/plant/webhook": {
      "post": {
        "description": "Information about a new plant added to the store",
        "requestBody": {
          "description": "Plant added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Crawl": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateCrawl"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the crawl",
                "type": "integer",
                "format": "int64"
              },
              "createdAt": {
                "description": "Timestamp when the crawl was created",
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "description": "Current status of the crawl",
                "type": "string",
                "enum": [
                  "RUNNING",
                  "COMPLETED",
                  "FAILED",
                  "STOPPED"
                ]
              },
              "completedAt": {
                "description": "Timestamp when the crawl was completed",
                "type": "string",
                "format": "date-time"
              },
              "stopReason": {
                "description": "Reason why the crawl was stopped",
                "type": "string",
                "enum": [
                  "COMPLETED",
                  "MAX_RESULTS",
                  "MAX_DEPTH",
                  "TIMEOUT",
                  "ERROR",
                  "MANUAL"
                ]
              },
              "durationInSeconds": {
                "description": "Duration of the crawl in seconds",
                "type": "integer",
                "minimum": 0
              },
              "anonymousUserId": {
                "description": "ID of the anonymous user who initiated the crawl",
                "type": "string"
              },
              "userId": {
                "description": "ID of the user who initiated the crawl",
                "type": "string"
              },
              "brandId": {
                "description": "ID of the brand associated with the crawl",
                "type": "string"
              },
              "engineType": {
                "description": "Type of engine used for crawling",
                "type": "string",
                "enum": [
                  "playwright",
                  "cheerio"
                ]
              },
              "startUrls": {
                "description": "Array of URLs to start crawling from",
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "numberOfResults": {
                "description": "Number of results collected",
                "type": "integer",
                "minimum": 0
              },
              "maxDepth": {
                "description": "Maximum depth of pages to crawl",
                "type": "integer",
                "minimum": 1,
                "maximum": 99
              },
              "maxConcurrentPages": {
                "description": "Maximum number of concurrent pages to crawl",
                "type": "integer",
                "minimum": 1,
                "maximum": 99
              },
              "maxResults": {
                "description": "Maximum number of results to collect",
                "type": "integer",
                "minimum": 1,
                "maximum": 2500
              },
              "includeOnlyPaths": {
                "description": "Array of paths to include in the crawl",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "excludePaths": {
                "description": "Array of paths to exclude from the crawl",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "includeOnlyTags": {
                "description": "Array of HTML tags to include",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "excludeTags": {
                "description": "Array of HTML tags to exclude",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "stack": {
                "description": "Type of stack used for crawling",
                "type": "string",
                "enum": [
                  "NODE",
                  "PYTHON"
                ]
              },
              "origin": {
                "description": "Origin of the crawl request",
                "type": "string",
                "enum": [
                  "API",
                  "WEB",
                  "CLI"
                ]
              },
              "timeout": {
                "description": "Timeout duration in seconds",
                "type": "integer",
                "minimum": 0,
                "default": 1800
              }
            }
          }
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreateCrawlDto": {
        "type": "object",
        "required": [
          "startUrl",
          "maxResults"
        ],
        "properties": {
          "startUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com",
            "description": "URL to start crawling from"
          },
          "maxDepth": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "description": "Maximum depth of pages to crawl"
          },
          "maxResults": {
            "type": "integer",
            "minimum": 1,
            "maximum": 999,
            "description": "Maximum number of results to collect"
          },
          "includeExternalLinks": {
            "type": "boolean",
            "description": "Whether to include external links in the crawl"
          },
          "includeOnlyPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of paths to include in the crawl"
          },
          "excludePaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of paths to exclude from the crawl"
          },
          "includeOnlyTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of HTML tags to include"
          },
          "excludeTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of HTML tags to exclude"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}